{
  "name": "processor",
  "version": "0.1.9",
  "author": {
    "name": "vadim b.",
    "email": "antheworld@gmail.com"
  },
  "homepage": "http://aplib.github.io/processor.js/",
  "description": "Component object model library",
  "repository": {
    "type": "git",
    "url": "https://github.com/aplib/processor.js.git"
  },
  "main": "processor.js",
  "bugs": {
    "url": "http://github.com/aplib/processor.js/issues"
  },
  "files": [
    "processor.js",
    "LICENSE",
    "README.md",
    "index.html",
    "docs.html"
  ],
  "license": "MIT",
  "readme": "processor.js Component object model library\r\n============\r\n\r\nprocessor.js is a platform-independent, JavaScript node.js npm-based library for creating problem-oriented object models, implementation of component-based architecture and application of IoC-patterns. See also [controls.js](http://aplib.github.io/controls.js) COM library.\r\n\r\n[![NPM version](https://badge.fury.io/js/processor.png)](http://badge.fury.io/js/processor)\r\n\r\nAbout the syntax:\r\n\r\n    // fs.* namespace component module\r\n\r\n    // Copy files to folder\r\n\r\n    create('fs.copy', [['libs/jquery.js', 'libs/marked.js', 'libs/bootstrap.js'], 'temp'])\r\n        .updateSync();\r\n\r\n\r\n    // Enumerate files in subdirectories\r\n\r\n    var list =\r\n        create('fs.walker [f]', [/.*\\.utest\\.js/i, 'src'])\r\n            .listSync();\r\n\r\n\r\n    // Creating object model\r\n\r\n    // list source files\r\n    root\r\n        .add('source:fs.directory force', 'temp')\r\n            ._add('file1:filereader', 'test1.dat')\r\n            ._add('file2:filereader', 'test2.dat');\r\n    // destination file\r\n    root\r\n        .add('destination:filewriter', 'temp/out.dat');\r\n    // operation\r\n    root.add('concat:fs.concat', [root.source.childs, root.destination]);\r\n\r\n\r\n    // events\r\n\r\n    root.findFirst('filereader')\r\n        .on('watcher', function() {\r\n            alert('oops! test1.dat file changed!');\r\n        });\r\n\r\nApproach using OM will allow more flexibility to manage tasks and task parameters. And the possibilities of language, whether it is even and JavaScript, allow you to program components in a simple way, macros and scripts of any complexity.\r\n\r\n\r\n### Installing\r\n\r\n    npm install processor\r\n\r\ninstall modules\r\n\r\n    npm install com-fs\r\n    ...\r\n\r\n### using\r\n\r\n\r\n    var processor = require('processor'),\r\n        create = processor.create.bind(processor);\r\n    // using fs namespace components\r\n        require('com-fs');\r\n\r\n\r\n    // recursively walk and build file list\r\n    create('fs.walker raw', [/.*\\.js/, '/src'])\r\n        .listSync(function(path) {\r\n            ...\r\n        });\r\n    });\r\n\r\n### modules\r\n\r\n[GitHub modules list repository](https://github.com/node-components)\r\n\r\n[com-fs](https://github.com/node-components/com-fs) basic file system components module",
  "readmeFilename": "README.md",
  "_id": "processor@0.1.9",
  "_from": "processor@"
}
